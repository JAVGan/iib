# SPDX-License-Identifier: GPL-3.0-or-later
import fileinput
import logging
import os
import subprocess
import tempfile

from iib.exceptions import IIBError
from iib.workers.tasks.celery import app
from iib.workers.config import get_worker_config


__all__ = ['opm_index_add']

log = logging.getLogger(__name__)


def _build_image(dockerfile_dir, request_id):
    """
    Build the index image.

    :param str dockerfile_dir: the path to the directory containing the data generated by the
        opm command.
    :param int request_id: the ID of the IIB build request
    :raises iib.exceptions.IIBError: if the build fails
    """
    destination = _get_local_pull_spec(request_id)
    log.info('Building the index image and tagging it as %s', destination)
    dockerfile_path = os.path.join(dockerfile_dir, 'index.Dockerfile')
    _run_cmd(
        ['podman', 'build', '-f', dockerfile_path, '-t', destination, '.'],
        {'cwd': dockerfile_dir},
        exc_msg='Failed to build the index image',
    )


def _cleanup():
    """
    Remove all existing container images on the host.

    This will ensure that the host will not run out of disk space due to stale data, and that
    all images referenced using floating tags will be up to date on the host.

    :raises iib.exceptions.IIBError: if the command to remove the images fails
    """
    log.info('Removing all existing container images')
    _run_cmd(
        ['podman', 'rmi', '--all', '--force'],
        exc_msg='Failed to remove the existing container images',
    )


def _fix_opm_path(dockerfile_dir):
    """
    Fix the path to /bin/opm in the generated Dockerfile.

    This is a workaround until https://github.com/operator-framework/operator-registry/pull/173 is
    released.

    :param str dockerfile_dir: the path to the directory containing the data generated by the
        opm command.
    """
    log.debug('Fixing the opm path in index.Dockerfile')
    dockerfile_path = os.path.join(dockerfile_dir, 'index.Dockerfile')
    # This modifies the index.Dockerfile file inplace. For every line, anything sent to stdout
    # will be used as the line in the file.
    for line in fileinput.input(dockerfile_path, inplace=True):
        # Keep the line the same unless it has '/build/bin/opm' in it. If it does, replace it with
        # '/bin/opm'.
        print(line.replace('/build/bin/opm', '/bin/opm'), end='')


def _get_local_pull_spec(request_id):
    """
    Get the pull specification of the index image for this request.

    :return: the pull specification of the index image for this request.
    :rtype: str
    """
    return f'operator-registry-index:{request_id}'


def _push_arch_image(request_id):
    """
    Push the single arch index image to the configured registry.

    :param int request_id: the ID of the IIB build request
    :raises iib.exceptions.IIBError: if the push fails
    """
    source = _get_local_pull_spec(request_id)
    conf = get_worker_config()
    destination = conf['iib_arch_image_push_template'].format(
        registry=conf['iib_registry'], request_id=request_id, arch=conf['iib_arch']
    )
    log.info('Pushing the index image %s to %s', source, destination)
    _run_cmd(
        ['podman', 'push', '-q', source, destination, '--creds', conf['iib_registry_credentials']],
        exc_msg=f'Failed to push the index image to {destination}',
    )


@app.task
def opm_index_add(bundles, binary_image, request_id, from_index=None):
    """
    Build and push an operator index image for a specific architecture with the input bundles.

    :param list bundles: a list of strings representing the pull specifications of the bundles to
        add to the index image being built.
    :param str binary_image: the pull specification of the image where the opm binary gets copied
        from.
    :param int request_id: the ID of the IIB build request
    :param str from_index: the pull specification of the image containing the index that the index
        image build will be based from.
    :raises iib.exceptions.IIBError: if the index image build fails.
    """
    _cleanup()
    with tempfile.TemporaryDirectory(prefix='iib-') as temp_dir:
        # TODO: Once https://github.com/operator-framework/operator-registry/pull/173 is
        # released, opm can just call podman directly for us.
        cmd = [
            'opm',
            'index',
            'add',
            '--generate',
            '--bundles',
            ','.join(bundles),
            '--binary-image',
            binary_image,
        ]

        log.info(
            'Generating the database file with the following bundle(s): %s', ', '.join(bundles)
        )
        if from_index:
            log.info('Using the existing database from %s', from_index)
            cmd.extend(['--from-index', from_index])
        _run_cmd(cmd, {'cwd': temp_dir}, exc_msg='Failed to add the bundles to the index image')

        _fix_opm_path(temp_dir)
        _build_image(temp_dir, request_id)

    _push_arch_image(request_id)


def _run_cmd(cmd, params=None, exc_msg=None):
    """
    Run the given command with the provided parameters.

    :param iter cmd: iterable representing the command to be executed
    :param dict params: keyword parameters for command execution
    :param str exc_msg: an optional exception message when the command fails
    :return: the command output
    :rtype: str
    :raises iib.exceptions.IIBError: if the command fails
    """
    if not params:
        params = {}
    params.setdefault('universal_newlines', True)
    params.setdefault('encoding', 'utf-8')
    params.setdefault('stderr', subprocess.PIPE)
    params.setdefault('stdout', subprocess.PIPE)

    response = subprocess.run(cmd, **params)

    if response.returncode != 0:
        log.error('The command "%s" failed with: %s', ' '.join(cmd), response.stderr)
        raise IIBError(exc_msg or 'An unexpected error occurred')

    return response.stdout
